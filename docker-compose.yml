version: "3.3"

#volumes:

  # Configuration example for External HD #1
  # (credentials stored in .env file)
  #external-hd1:
  #  driver: local
  #  driver_opts:
  #    type: cifs
  #    o: username=${EXTERNAL_HD1_USERNAME},password=${EXTERNAL_HD1_PASSWORD},uid=${USER_PUID},gid=${USER_PGID},iocharset=utf8,file_mode=0777,dir_mode=0777
  #    device: "${EXTERNAL_HD1_PATH}"

services:

  # ==========================================================================
  # Transmission-OpenVPN service
  # => torrent server secured by VPN connection
  transmission-openvpn:
    image: haugene/transmission-openvpn:4.2
    container_name: transmission-openvpn
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
    cap_add:
      # Admin credentials for docker container
      - NET_ADMIN
    environment:
      - CREATE_TUN_DEVICE=true
      # OpenVPN settings
      - OPENVPN_PROVIDER=surfshark
      # OPENVPN_CONFIG: comma separated list allowed, with random selection at startup
      - OPENVPN_CONFIG=fr-par.prod.surfshark.com_udp
      - OPENVPN_OPTS=--mute-replay-warnings --inactive 3600 --ping 10 --ping-exit 60
      # OpenVPN credentials to connect to VPN (credentials stored in .env file)
      - OPENVPN_USERNAME=${OPENVPN_USERNAME}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      # Transmission dirs
      - TRANSMISSION_HOME=/data/transmission-home
      - TRANSMISSION_DOWNLOAD_DIR=/storage/complete
      - TRANSMISSION_INCOMPLETE_DIR_ENABLED=false
      - TRANSMISSION_INCOMPLETE_DIR=/storage/incomplete
      - TRANSMISSION_WATCH_DIR_ENABLED=true
      - TRANSMISSION_WATCH_DIR=/storage/watch
      # Transmission download / uploads settings
      - TRANSMISSION_DOWNLOAD_QUEUE_ENABLED=true
      - TRANSMISSION_DOWNLOAD_QUEUE_SIZE=50
      - TRANSMISSION_SPEED_LIMIT_UP_ENABLED=true
      - TRANSMISSION_SPEED_LIMIT_UP=1000
      # Transmission Web UI: kettu, combustion, transmission-web-control, flood-for-transmission
      - TRANSMISSION_WEB_UI=flood-for-transmission
      # Enable HTTP proxy
      - WEBPROXY_ENABLED=true
      - WEBPROXY_PORT=8789
      # Firewall and routes (block non VPN traffic)
      - DROP_DEFAULT_ROUTE=true
      # Firewall not working anymore with docker image v3 / new PIA servers ?
      # - ENABLE_UFW=true
      # - UFW_ALLOW_GW_NET=true
      # - UFW_EXTRA_PORTS=
      # - UFW_DISABLE_IPTABLES_REJECT=false
      # Network settings
      - LOCAL_NETWORK=192.168.0.0/24
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
    volumes:
      # Sync time with docker host
      - /etc/localtime:/etc/localtime:ro
      # Configuration dir
      - /share/Download/tools/transmission:/data/transmission-home
      # Storage dirs
      - /share/Download/incomplete:/storage/incomplete
      - /share/Download/complete:/storage/complete
      - /share/Download/watch:/storage/watch
    ports:
      # Transmission Web UI port
      - 9091:9091
      # HTTP Proxy port
      - 8789:8789
      # JOAL Web UI Port
      - 9092:9092
    restart: always

  # ==========================================================================
  # JOAL service
  # => Ratio Master clone with web UI to boost torrent seed ratio
  joal:
    image: anthonyraymond/joal:latest
    container_name: joal
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - transmission-openvpn
    volumes:
      # Configuration dir
      - /share/Download/tools/joal:/data
    # Use network from transmission-openvpn container to ensure traffic goes through VPN tunnel
    network_mode: "service:transmission-openvpn"
    # User from docker host to impersonate in container (configured in .env file)
    user: "${USER_PUID}:${USER_PGID}"
    restart: always
    command: "--joal-conf=/data --spring.main.web-environment=true --server.port=9092 --joal.ui.path.prefix=${JOAL_PATH_PREFIX} --joal.ui.secret-token=${JOAL_SECRET_TOKEN}"

  # ==========================================================================
  # Medusa service
  # => TV shows manager and auto-downloader, connected to torrent server
  medusa:
    image: linuxserver/medusa:latest
    container_name: medusa
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
    dns:
      # Public DNS
      - 8.8.8.8
      - 8.8.4.4
    environment:
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
    volumes:
      # Sync time with docker host
      - /etc/localtime:/etc/localtime:ro
      # Configuration dir
      - /share/Download/tools/medusa:/config
      # Storage dirs
      - /share/Download/complete/medusa:/storage/complete/medusa
      - /share/Multimedia/Series:/storage/Series
      - /share/Multimedia/Enfants/Series:/storage/Enfants/Series
      #- external-hd1:/storage/_hd1
    ports:
      # Medusa Web UI port
      - 8081:8081
    restart: always

  # ==========================================================================
  # Radarr service
  # => Movies manager and auto-downloader, connected to torrent server
  #
  # ------------------------------------
  # Manual configuration in Web UI:
  # - Settings > Media Management > Root Folders:
  #   [+] /storage/Films
  #   [+] /storage/Enfants/Films
  # - Settings > Download Clients > [+] Transmission:
  #   - Host: transmission-openvpn
  #   - Port: 9091
  #   - Category: radarr
  # - Settings > Indexers > choose your indexers to download torrents from ...
  # - Settings > General > Proxy: if you want to use HTTP proxy to VPN tunnel
  #   - Use Proxy: X
  #   - Proxy Type: HTTP(S)
  #   - Host: transmission-openvpn
  #   - Port: 8789
  # ------------------------------------
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
    dns:
      # Public DNS
      - 8.8.8.8
      - 8.8.4.4
    environment:
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
    volumes:
      # Sync time with docker host
      - /etc/localtime:/etc/localtime:ro
      # Configuration dir
      - /share/Download/tools/radarr:/config
      # Storage dirs
      - /share/Download/complete/radarr:/storage/complete/radarr
      - /share/Multimedia/Films:/storage/Films
      - /share/Multimedia/Enfants/Films:/storage/Enfants/Films
      #- external-hd1:/storage/_hd1
    ports:
      # Radarr Web UI port
      - 7878:7878
    restart: always

  # ==========================================================================
  # Bazaar service
  # => TODO
  bazarr:
    image: linuxserver/bazarr
    container_name: bazarr
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
    dns:
      # Public DNS
      - 8.8.8.8
      - 8.8.4.4
    environment:
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
    volumes:
      # Sync time with docker host
      - /etc/localtime:/etc/localtime:ro
      # Configuration dir
      - /share/Download/tools/bazarr:/config
      # Storage dirs
      - /share/Multimedia/Films:/storage/Films
      - /share/Multimedia/Enfants/Films:/storage/Enfants/Films
      - /share/Multimedia/Series:/storage/Series
      - /share/Multimedia/Enfants/Series:/storage/Enfants/Series
      #- external-hd1:/storage/_hd1
    ports:
      # Bazaar Web UI port
      - 6767:6767
    restart: always

  # ==========================================================================
  # Kodi MariaDB service
  # => MariaDB for Kodi configuration sharing between devices
  #
  # ------------------------------------
  # See tutorial for Kodi setup:
  # https://kodi.wiki/view/MySQL/Setting_up_Kodi
  #
  # Use this configuration for '':
  # <advancedsettings>
  #   <videodatabase>
  #     <name>kodi-video</name>
  #     <type>mysql</type>
  #     <host>***DEVICE IP***</host>
  #     <port>3636</port>
  #     <user>${KODI_DB_USER}</user>
  #     <pass>${KODI_DB_PASSWORD}</pass>
  #   </videodatabase> 
  #   <musicdatabase>
  #     <name>kodi-music</name>
  #     <type>mysql</type>
  #     <host>***DEVICE IP***</host>
  #     <port>3636</port>
  #     <user>${KODI_DB_USER}</user>
  #     <pass>${KODI_DB_PASSWORD}</pass>
  #   </musicdatabase>
  #   <videolibrary>
  #     <importwatchedstate>true</importwatchedstate>
  #     <importresumepoint>true</importresumepoint>
  #   </videolibrary>
  # </advancedsettings>
  # ------------------------------------
  kodi-mariadb:
    image: linuxserver/mariadb:latest
    container_name: kodi-mariadb
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
    environment:
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
      # Temporary MySQL DB name (deleted after initial install)
      - MYSQL_DATABASE=tempdb
      # MySQL root password (not used after initial install)
      - MYSQL_ROOT_PASSWORD=${KODI_DB_ROOT_PASSWORD}
      # MySQL user to configure in Kodi to connect to MySQL (Kodi creates databases automatically)
      - MYSQL_USER=${KODI_DB_USER}
      - MYSQL_PASSWORD=${KODI_DB_PASSWORD}
    volumes:
      # Configuration dir (must contain 'initdb.d/ini_kodi.sql' script for initial install)
      - /share/Download/tools/kodi-mariadb:/config
    ports:
      # MariaDB port to configure in Kodi to connect to MySQL
      - 3636:3306
    restart: always

  # ==========================================================================
  # nginx service
  # => Reverse proxy, used to expose services as HTTPS with SSL certificates and basic authentication
  nginx:
    image: nginx:latest
    container_name: nginx
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
    dns:
      # Public DNS
      - 8.8.8.8
      - 8.8.4.4
    volumes:
      # Sync time with docker host
      - /etc/localtime:/etc/localtime:ro
      # Configuration file
      - /share/Download/tools/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # Password file (use 'configurator' docker container to generate)
      - /share/Download/tools/nginx/passwords:/etc/nginx/passwords:ro
      # Logs dir
      - /share/Download/tools/nginx/logs:/var/log/nginx
      # SSL certificates
      - /share/Download/tools/ssl/ahuh.crt:/etc/nginx/certs/ssl.crt:ro
      - /share/Download/tools/ssl/ahuh.key:/etc/nginx/certs/ssl.key:ro
    ports:
      # Radarr external port
      - 44478:44478
      # Medusa external port
      - 44481:44481
      # Transmission external port      
      - 44491:44491
    # User from docker host to impersonate in container (configured in .env file)
    user: "${USER_PUID}:${USER_PGID}"
    restart: always

  # ==========================================================================
  # MiniDLNA service
  # => UPnP / DLNA service, used to publish media files on the local network
  minidlna:
    image: vladgh/minidlna:latest
    container_name: minidlna
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
    network_mode: "host"
    environment:
      # MiniDLNA settings
      - MINIDLNA_FRIENDLY_NAME=ahuh-qnas-mini
      - MINIDLNA_MEDIA_DIR=/storage
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
    volumes:
      # Sync time with docker host
      - /etc/localtime:/etc/localtime:ro
      # Configuration dir
      - /share/Download/tools/minidlna:/minidlna
      # Storage dirs
      - /share/Download/complete:/storage/complete:ro
      - /share/Perso/Backup:/storage/Backup:ro
      - /share/Perso/Photos:/storage/Photos:ro
      - /share/Perso/Videos:/storage/Videos:ro
      - /share/Multimedia/Films:/storage/Films:ro
      - /share/Multimedia/MP3:/storage/MP3:ro
      - /share/Multimedia/Series:/storage/Series:ro
      - /share/Multimedia/Enfants/Films:/storage/Enfants/Films:ro
      - /share/Multimedia/Enfants/Series:/storage/Enfants/Series:ro
      - /share/Multimedia/Enfants/Videos:/storage/Enfants/Videos:ro
      #- external-hd1:/storage/_hd1:ro
    restart: always

  # ==========================================================================
  # pyphotorg service
  # => Photo organizer and deduplicator, used to manage photos / videos on the NAS
  pyphotorg:
    image: ahuh/pyphotorg:latest
    container_name: pyphotorg
    labels:
      # Enable automatic update with Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
    environment:
      # Operation switches
      - ENABLE_ORGANIZE=true
      - ENABLE_DEDUPLICATE=true
      # Dry-run mode (no modification applied) or real mode
      - DRY_RUN_MODE=false
      # Job scheduler (cron format)
      - "SCHEDULE_CRON=15 2 * * sun"
      # Deduplicator - Dirs and priority orders for duplicate removal (remove duplicates from highest to lowest number)
      - "DEDUP_STORAGE_PATH=/storage/Photos"
      - "DEDUP_BACKUP_PATH=/storage/Backup/pyphotorg"
      - "DEDUP_DIR_ORDER_01=/storage/Photos/Famille"
      - "DEDUP_DIR_ORDER_02=/storage/Photos/Amis"
      - "DEDUP_DIR_ORDER_03=/storage/Photos/Mobile Olivia"
      - "DEDUP_DIR_ORDER_04=/storage/Photos/Mobile Julien"
      - "DEDUP_DIR_PATH_FILTER=/.@__thumb"
      # Organizer - Path couples: sync dirs (source) and storage dirs (target)
      - "ORG_INCOMING_PATH_01=/storage/sync/camera-julien"
      - "ORG_STORAGE_PATH_01=/storage/Photos/Mobile Julien"
      - "ORG_INCOMING_PATH_02=/storage/sync/camera-olivia"
      - "ORG_STORAGE_PATH_02=/storage/Photos/Mobile Olivia"
      # Organizer parameters
      - ORG_TIMESTAMP_TAGS=FileModifyDate,CreationDate,CreateDate,DateTimeOriginal
      - ORG_STORAGE_PATH_PATTERN=%Y/%Y-%m/%Y%m%d_%H%M%S%%-3c.%%e
      # User from docker host to impersonate in container (configured in .env file)
      - PUID=${USER_PUID}
      - PGID=${USER_PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      # Sync dir
      - /share/homes/ahuh/.Qsync:/storage/sync
      # Storage dir
      - /share/Perso/Photos:/storage/Photos
      # Backup dir
      - /share/Perso/Backup/pyphotorg:/storage/Backup/pyphotorg
    restart: always
